import java.io.*;
import java.util.*;

class Funcionario {
    private String nome;
    private int idade;
    private int anoNascimento;
    private String numeroContribuinte;
    private double salario;
    private String cargo;

    // Construtor
    public Funcionario(String nome, int idade, int anoNascimento, String numeroContribuinte, double salario, String cargo) {
        this.nome = nome;
        this.idade = idade;
        this.anoNascimento = anoNascimento;
        this.numeroContribuinte = numeroContribuinte;
        this.salario = salario;
        this.cargo = cargo;
    }

    // Método para calcular salário líquido
    public double calcularSalarioLiquido(double descontoImpostos, double beneficios) {
        return salario - (salario * descontoImpostos / 100) + beneficios;
    }

    // Métodos getters
    public String getNome() {
        return nome;
    }

    public double getSalario() {
        return salario;
    }

    public String getCargo() {
        return cargo;
    }

    // Método para formatar dados do funcionário como String
    @Override
    public String toString() {
        return "Nome: " + nome + ", Idade: " + idade + ", Ano Nascimento: " + anoNascimento +
                ", Nº Contribuinte: " + numeroContribuinte + ", Salário: " + salario + ", Cargo: " + cargo;
    }

    // Método para salvar dados no formato CSV
    public String toCSV() {
        return nome + "," + idade + "," + anoNascimento + "," + numeroContribuinte + "," + salario + "," + cargo;
    }

    // Método para criar um objeto Funcionario a partir de uma linha CSV
    public static Funcionario fromCSV(String linha) {
        String[] dados = linha.split(",");
        return new Funcionario(
                dados[0],
                Integer.parseInt(dados[1]),
                Integer.parseInt(dados[2]),
                dados[3],
                Double.parseDouble(dados[4]),
                dados[5]
        );
    }
}

public class Empresa {
    private static List<Funcionario> funcionarios = new ArrayList<>();
    private static final String ARQUIVO = "funcionarios.csv";

    public static void main(String[] args) {
        carregarDadosDeArquivo();
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\n=== MENU PRINCIPAL ===");
            System.out.println("1. Adicionar funcionário");
            System.out.println("2. Listar funcionários");
            System.out.println("3. Calcular salário líquido");
            System.out.println("4. Salvar dados em arquivo");
            System.out.println("5. Sair");
            System.out.print("Escolha uma opção: ");
            int opcao = scanner.nextInt();
            scanner.nextLine(); // Consumir o enter

            switch (opcao) {
                case 1:
                    adicionarFuncionario(scanner);
                    break;
                case 2:
                    listarFuncionarios();
                    break;
                case 3:
                    calcularSalarioLiquido(scanner);
                    break;
                case 4:
                    salvarDadosEmArquivo();
                    break;
                case 5:
                    System.out.println("Encerrando o programa...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        }
    }

    private static void adicionarFuncionario(Scanner scanner) {
        System.out.print("Digite o nome: ");
        String nome = scanner.nextLine();
        System.out.print("Digite a idade: ");
        int idade = scanner.nextInt();
        System.out.print("Digite o ano de nascimento: ");
        int anoNascimento = scanner.nextInt();
        scanner.nextLine(); // Consumir o enter
        System.out.print("Digite o número de contribuinte: ");
        String numeroContribuinte = scanner.nextLine();
        System.out.print("Digite o salário: ");
        double salario = scanner.nextDouble();
        scanner.nextLine(); // Consumir o enter
        System.out.print("Digite o cargo: ");
        String cargo = scanner.nextLine();

        Funcionario funcionario = new Funcionario(nome, idade, anoNascimento, numeroContribuinte, salario, cargo);
        funcionarios.add(funcionario);
        System.out.println("Funcionário adicionado com sucesso!");
    }

    private static void listarFuncionarios() {
        if (funcionarios.isEmpty()) {
            System.out.println("Nenhum funcionário cadastrado.");
            return;
        }
        System.out.println("\n=== Lista de Funcionários ===");
        for (int i = 0; i < funcionarios.size(); i++) {
            System.out.println((i + 1) + ". " + funcionarios.get(i));
        }
    }

    private static void calcularSalarioLiquido(Scanner scanner) {
        if (funcionarios.isEmpty()) {
            System.out.println("Nenhum funcionário cadastrado.");
            return;
        }
        listarFuncionarios();
        System.out.print("Escolha o número do funcionário: ");
        int escolha = scanner.nextInt();
        scanner.nextLine(); // Consumir o enter
        if (escolha < 1 || escolha > funcionarios.size()) {
            System.out.println("Funcionário inválido!");
            return;
        }
        Funcionario funcionario = funcionarios.get(escolha - 1);
        System.out.print("Digite o percentual de desconto de impostos (%): ");
        double desconto = scanner.nextDouble();
        System.out.print("Digite o valor dos benefícios: ");
        double beneficios = scanner.nextDouble();
        double salarioLiquido = funcionario.calcularSalarioLiquido(desconto, beneficios);
        System.out.printf("Salário líquido de %s: %.2f%n", funcionario.getNome(), salarioLiquido);
    }

    private static void salvarDadosEmArquivo() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(ARQUIVO))) {
            for (Funcionario funcionario : funcionarios) {
                writer.write(funcionario.toCSV());
                writer.newLine();
            }
            System.out.println("Dados salvos com sucesso no arquivo '" + ARQUIVO + "'!");
        } catch (IOException e) {
            System.out.println("Erro ao salvar os dados: " + e.getMessage());
        }
    }

    private static void carregarDadosDeArquivo() {
        try (BufferedReader reader = new BufferedReader(new FileReader(ARQUIVO))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                funcionarios.add(Funcionario.fromCSV(linha));
            }
            System.out.println("Dados carregados do arquivo '" + ARQUIVO + "' com sucesso!");
        } catch (FileNotFoundException e) {
            System.out.println("Arquivo de dados não encontrado. Começando com lista vazia.");
        } catch (IOException e) {
            System.out.println("Erro ao carregar os dados: " + e.getMessage());
        }
    }
}